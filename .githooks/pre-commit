#!/usr/bin/env bash
set -euo pipefail

if [[ "${SKIP_HOOKS:-}" == 1 ]]; then
  exit 0
fi

# 1) PRNG coupling guard (existing logic)
PRNG_FILE="crates/rmg-core/src/math/prng.rs"
if git diff --cached --name-only | grep -qx "$PRNG_FILE"; then
  DIFF=$(git diff --cached -- "$PRNG_FILE" || true)
  if echo "$DIFF" | grep -E '^(\+|-)\s*(fn\s+next_u64|fn\s+from_seed_u64|fn\s+from_seed\(|fn\s+next_int\()' >/dev/null; then
    ALGO_CHANGED=1
  else
    ALGO_CHANGED=0
  fi
  if echo "$DIFF" | grep -E 'PRNG_ALGO_VERSION' >/dev/null; then
    VERSION_CHANGED=1
  else
    VERSION_CHANGED=0
  fi
  if echo "$DIFF" | grep -E 'next_int_golden_regression|assert_eq!\(values,\s*vec!\[' >/dev/null; then
    GOLDEN_CHANGED=1
  else
    GOLDEN_CHANGED=0
  fi
  FAIL=0
  if [[ "$ALGO_CHANGED" -eq 1 && "$VERSION_CHANGED" -eq 0 ]]; then
    echo "pre-commit: PRNG algorithm changed but PRNG_ALGO_VERSION was not bumped." >&2
    FAIL=1
  fi
  if [[ "$VERSION_CHANGED" -eq 1 && "$GOLDEN_CHANGED" -eq 0 ]]; then
    echo "pre-commit: PRNG_ALGO_VERSION bumped but golden regression vector was not updated." >&2
    FAIL=1
  fi
  if [[ "$FAIL" -eq 1 ]]; then
    echo "pre-commit: Refusing commit. Update algorithm version and golden regression together." >&2
    exit 1
  fi
fi

# 2) Enforce toolchain pin (matches rust-toolchain.toml)
if command -v rustup >/dev/null 2>&1; then
  PINNED=$(awk -F '"' '/^channel/ {print $2}' rust-toolchain.toml 2>/dev/null || echo "")
  ACTIVE=$(rustup show active-toolchain 2>/dev/null | awk '{print $1}')
  if [[ -n "$PINNED" && "$ACTIVE" != "$PINNED"* ]]; then
    echo "pre-commit: Active toolchain '$ACTIVE' != pinned '$PINNED'. Run: rustup override set $PINNED" >&2
    exit 1
  fi
fi

# 3) Format check (fast)
cargo fmt --all -- --check

# 4) Docs guard: if any non-doc file is staged, require execution-plan + decision-log to be staged too
STAGED=$(git diff --cached --name-only)
NON_DOC=$(echo "$STAGED" | grep -vE '(^docs/)|(\.md$)' || true)
if [[ -n "$NON_DOC" ]]; then
  echo "$STAGED" | grep -Fx 'docs/execution-plan.md' >/dev/null || { echo 'pre-commit: docs/execution-plan.md must be updated when non-doc files change.' >&2; exit 1; }
  echo "$STAGED" | grep -Fx 'docs/decision-log.md' >/dev/null || { echo 'pre-commit: docs/decision-log.md must be updated when non-doc files change.' >&2; exit 1; }
fi

# 5) Lockfile guard: ensure lockfile version is v3 (compatible with MSRV cargo)
if [[ -f Cargo.lock ]]; then
  VER_LINE=$(grep -n '^version = ' Cargo.lock | head -n1 | awk -F'= ' '{print $2}')
  if [[ "$VER_LINE" != "3" && "$VER_LINE" != "3\r" ]]; then
    echo "pre-commit: Cargo.lock must be generated with Cargo 1.68 (lockfile v3)." >&2
    echo "Run: cargo +1.68.0 generate-lockfile" >&2
    exit 1
  fi
fi

# 6) Targeted clippy + check for changed crates (fast-ish)
CRATES=$(echo "$STAGED" | sed -n 's#^crates/\([^/]*\)/.*#\1#p' | sort -u)
for c in $CRATES; do
  cargo clippy -p "$c" --all-targets -- -D warnings -D missing_docs
  cargo check -p "$c" --quiet
done

exit 0
