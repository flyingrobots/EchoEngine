#!/usr/bin/env bash
set -euo pipefail
PINNED="${PINNED:-1.71.1}"

for cmd in cargo rustup rg; do
  if ! command -v "$cmd" >/dev/null 2>&1; then
    echo "[pre-push] missing dependency: $cmd. Install it and retry." >&2
    exit 1
  fi
done

echo "🐰 BunBun 🐇"

if [[ "${SKIP_HOOKS:-}" == 1 ]]; then
  exit 0
fi

echo "[pre-push] fmt (default toolchain)"
cargo fmt --all -- --check

echo "[pre-push] clippy (workspace, default toolchain)"
cargo clippy --all-targets -- -D warnings -D missing_docs

echo "[pre-push] tests (workspace, default toolchain)"
cargo test --workspace

echo "[pre-push] MSRV checks (@ $PINNED) for core libraries"
if ! rustup run "$PINNED" cargo -V >/dev/null 2>&1; then
  echo "[pre-push] MSRV toolchain $PINNED not installed. Install via: rustup toolchain install $PINNED" >&2
  exit 1
fi
cargo +"$PINNED" test -p rmg-core --all-targets
cargo +"$PINNED" test -p rmg-geom --all-targets

# Rustdoc warnings guard (core API)
echo "[pre-push] rustdoc warnings gate (rmg-core @ $PINNED)"
RUSTDOCFLAGS="-D warnings" cargo +"$PINNED" doc -p rmg-core --no-deps

# Banned patterns
echo "[pre-push] scanning banned patterns"
# Forbid crate-level allow(missing_docs) in library source files, but allow in tests and build scripts
if rg -n '#!\[allow\([^]]*missing_docs[^]]*\)\]' \
  crates \
  --glob 'crates/**/src/**/*.rs' \
  --glob '!**/telemetry.rs' \
  --glob '!**/tests/**' >/dev/null; then
  echo "pre-push: crate-level allow(missing_docs) is forbidden (except telemetry.rs)." >&2
  rg -n '#!\[allow\([^]]*missing_docs[^]]*\)\]' crates --glob 'crates/**/src/**/*.rs' --glob '!**/telemetry.rs' --glob '!**/tests/**' | cat >&2 || true
  exit 1
fi
if rg -n "\#\[unsafe\(no_mangle\)\]" crates >/dev/null; then
  echo "pre-push: #[unsafe(no_mangle)] is invalid; use #[no_mangle]." >&2
  rg -n "\#\[unsafe\(no_mangle\)\]" crates | cat >&2 || true
  exit 1
fi

exit 0
